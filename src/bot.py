import os
import asyncio
import aiohttp
import logging
from typing import Optional, Dict, Any, List
from telebot.async_telebot import AsyncTeleBot
from dotenv import load_dotenv
from aiohttp import ClientTimeout, TCPConnector
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class Config:
    def __init__(self):  
        load_dotenv()
        self.BOT_TOKEN: str = os.getenv('BOT_TOKEN', '')
        self.API_URL: str = os.getenv('API_URL', '')
        self.MAX_RETRIES: int = int(os.getenv('MAX_RETRIES', '3'))
        self.TIMEOUT: int = int(os.getenv('TIMEOUT', '120'))  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        self.MAX_TEXT_LENGTH: int = int(os.getenv('MAX_TEXT_LENGTH', '4096'))
        self.RETRY_DELAY: int = int(os.getenv('RETRY_DELAY', '5'))
        
        if not self.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

config = Config()
bot = AsyncTeleBot(config.BOT_TOKEN)

class APIResponse:
    def __init__(self, success: bool, data: Optional[Dict] = None, error: Optional[str] = None):
        self.success = success
        self.data = data or {}
        self.error = error

class APIClient:
    def __init__(self, session: aiohttp.ClientSession):
        self.session = session
        self.timeout = ClientTimeout(total=config.TIMEOUT)

    async def classify_message(self, text: str) -> APIResponse:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if len(text) > config.MAX_TEXT_LENGTH:
            logger.warning(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç {config.MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤ –∏ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω")
            text = text[:config.MAX_TEXT_LENGTH]

        data = {
            "text": text,
            "name": None,
            "topic": None,
            "generate_answer": True
        }
        
        try:
            async with self.session.post(
                config.API_URL,
                json=data,
                headers={"Content-Type": "application/json"},
                timeout=self.timeout
            ) as response:
                response_text = await response.text()
                logger.debug(f"API –æ—Ç–≤–µ—Ç: {response_text}")
                
                if response.status == 200:
                    result = await response.json()
                    return APIResponse(success=True, data=result)
                    
                return APIResponse(
                    success=False, 
                    error=f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}: {response_text}"
                )
                
        except asyncio.TimeoutError:
            return APIResponse(success=False, error="–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
        except Exception as e:
            return APIResponse(success=False, error=str(e))

class MessageFormatter:
    @staticmethod
    def format_successful_classification(attributes: List[Dict[str, str]], keywords: Optional[List[str]] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        attr_names = {
            "equipment_type": "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
            "failure_point": "–¢–∏–ø –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏",
            "serial_number": "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"
        }
        
        reply = "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞:\n\n"
        
        for attr in attributes:
            name = attr_names.get(attr['name'], attr['name'])
            reply += f"üîπ {name}: {attr['value']}\n"
        
        if keywords:
            reply += f"\nüîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}"
            
        return reply

    @staticmethod
    def format_missing_info(missing_attrs: List[str], recognized_attrs: Optional[List[Dict[str, str]]] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        attr_names = {
            "equipment_type": "—Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
            "failure_point": "—Ç–∏–ø –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏",
            "serial_number": "—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"
        }
        
        reply = "‚ö†Ô∏è –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        
        if recognized_attrs:
            reply += "‚úì –£–∂–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n"
            for attr in recognized_attrs:
                name = attr_names.get(attr['name'], attr['name'])
                reply += f"- {name}: {attr['value']}\n"
            reply += "\n"
            
        reply += "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ:\n"
        for attr in missing_attrs:
            readable_name = attr_names.get(attr, attr)
            reply += f"- {readable_name}\n"
            
        return reply

async def process_api_response(response: APIResponse) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç API –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not response.success:
        logger.error(f"–û—à–∏–±–∫–∞ API: {response.error}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    data = response.data
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
    if data.get('answer'):
        return data['answer']
        
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
    if isinstance(data.get('attributes'), dict):
        data['attributes'] = [
            {'name': name, 'value': value}
            for name, value in data['attributes'].items()
            if value is not None
        ]
    
    if data.get('valid'):
        return MessageFormatter.format_successful_classification(
            data.get('attributes', []),
            data.get('keywords', [])
        )
    else:
        return MessageFormatter.format_missing_info(
            data.get('missingAttributes', []),
            data.get('attributes', [])
        )

@bot.message_handler(commands=['start', 'help'])
async def start_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É {message.text}")
    await bot.reply_to(message, 
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. ü§ñ\n\n"
        "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ –≤ –∑–∞—è–≤–∫–µ:\n"
        "- –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–æ—É—Ç–±—É–∫, —Å–µ—Ä–≤–µ—Ä, –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä)\n"
        "- –¢–∏–ø –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç–∫—Ä–∞–Ω, –∑–∞–≤–∏—Å–∞–µ—Ç)\n"
        "- –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
        "–ü—Ä–∏–º–µ—Ä –∑–∞—è–≤–∫–∏:\n"
        "'–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—É—Ç–±—É–∫ HP, —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä ABC123. –ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è —Å–æ–≤—Å–µ–º.'\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã, –∏ —è –ø–æ–º–æ–≥—É –µ—ë –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å! üëç"
    )

@bot.message_handler(func=lambda message: True)
async def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
    
    connector = TCPConnector(force_close=True)
    async with aiohttp.ClientSession(connector=connector) as session:
        api_client = APIClient(session)
        
        for attempt in range(config.MAX_RETRIES):
            try:
                response = await api_client.classify_message(message.text)
                reply = await process_api_response(response)
                await bot.reply_to(message, reply)
                break
            except Exception as e:
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
                if attempt == config.MAX_RETRIES - 1:
                    await bot.reply_to(
                        message,
                        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                else:
                    await asyncio.sleep(config.RETRY_DELAY)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    while True:
        try:
            await bot.polling(non_stop=True, timeout=60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)
            await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

if __name__ == "__main__":
    asyncio.run(main())